const WizardScene = require("telegraf/scenes/wizard");
const Markup = require('telegraf/markup');
const Extra = require('telegraf/extra');
const axios = require('axios');
const AWS = require('aws-sdk');
const stream = require('stream');
const User = require('../../models/User');
const menuModule = require('../menu');


const s3 = new AWS.S3({params: {Bucket: 'event-dater-tg'}});

const GenderKeyboard = 
  Extra.markup(Markup.inlineKeyboard([
    Markup.callbackButton('üöπ –ú—É–∂—Å–∫–æ–π', 'male'),
    Markup.callbackButton('üö∫ –ñ–µ–Ω—Å–∫–∏–π', 'female')
  ]));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ AWS S3
const uploadFromStream = (s3, key) => {
    var pass = new stream.PassThrough();
  
    var params = {Key: key.toString(), Body: pass};
    s3.upload(params, function(err, data) {
      console.log(err, data);
    });
    return pass;
  }


function registration(stage) {
  const register = new WizardScene(
    "registration",
    
    async (ctx) => {
      ctx.reply("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?");
      return ctx.wizard.next();
    },
    async (ctx) => {
      if (ctx.message.text && ctx.message.text.length > 1 && new RegExp('[A-—è]+', 'gi').test(ctx.message.text)) {
        ctx.session.user = {
            id: ctx.message.from.id,
            name: null,
            gender: null,
            age: null,
            about: null,
        }
        ctx.session.user.name = ctx.message.text;
        await ctx.reply("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, " + ctx.session.user.name);
        await ctx.reply("–¢–≤–æ–π –ø–æ–ª:",  GenderKeyboard);
        return ctx.wizard.next();
    } else {
        ctx.reply("–≠–º–º... –ü–æ—Ö–æ–∂–µ –≤ –∏–º–µ–Ω–∏ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
    }
  },
  // –ü–æ–ª

  (ctx) => {
    let callback = ctx.update.callback_query ? ctx.update.callback_query.data : ctx.message.text.trim().toLowerCase();

    if (['female', 'male', '–º', '–∂', '–º—É–∂', '–∂–µ–Ω', "–∂–µ–Ω—Å–∫", "–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"].indexOf(callback) != -1) {
      if (['male', '–º', "–º—É–∂", "–º—É–∂—Å–∫–æ–π"].indexOf(callback) != -1)
          ctx.session.user.gender = 1;
      else ctx.session.user.gender = 0;
      ctx.reply("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?");
      return ctx.wizard.next();
    } else {
        ctx.reply("–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è.\n–õ—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É)")
    }
  },
  // –í–æ–∑—Ä–∞—Å—Ç
    
    async (ctx) => {
      let age = parseInt(ctx.message.text, 10);
      if (Number.isInteger(age) && age >= 18 && age <= 70) {
          await ctx.reply(age.toString() + '..., —Ç–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º');
          ctx.session.user.age = age;

          //–ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è?
          let photo = await ctx.telegram.getUserProfilePhotos(ctx.message.from.id).then(res => res.photos[0]);
          if (photo)
            await ctx.reply('–î–∞–≤–∞–π –∑–∞–≥—Ä—É–∑–∏–º —Ñ–æ—Ç–æ', Extra.markup(Markup.inlineKeyboard([Markup.callbackButton("üé• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", 'profile')])));
          else
            await ctx.reply('–î–∞–≤–∞–π –∑–∞–≥—Ä—É–∑–∏–º —Ñ–æ—Ç–æ');

          return ctx.wizard.next();
      } else if (!Number.isInteger(age))
          ctx.reply("–ß—Ç–æ-—Ç–æ —Ç—ã –Ω–µ —Ç–æ –≤–≤–µ–ª" + —Åtx.session.user.gender ? '' : 'a');
      else {
          ctx.reply("–û–±—â–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∏, –∫–æ–º—É –æ—Ç 18 –¥–æ 70 –ª–µ—Ç.\n–ü—Ä–æ—Å—Ç–∏, —Ç–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞)");
          ctx.session.user = null;
          await ctx.scene.leave('registration');
      }
    },
    
    // –§–æ—Ç–æ

    async (ctx) => { // –í—Å–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª—è—Ç—å—Å—è. –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —Å—Ç–æ—Ä–æ–µ –º–µ–Ω—é —Ä–æ–Ω—è–µ—Ç —Å–µ—Ä–≤–µ—Ä
      let url = null;
      if (ctx.update.callback_query && ctx.update.callback_query.data == 'profile') {
          await ctx.telegram.getUserProfilePhotos(ctx.update.callback_query.from.id) // –ö–∞–∫ —ç—Ç–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Ñ–æ—Ç–æ?
            .then(res => res.photos[0][0].file_id)
            .then(id => {
              ctx.session.user.photo = id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º id –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ telegram, s3 –Ω–µ –Ω—É–∂–µ–Ω
              return ctx.telegram.getFileLink(id).then(src => url = src)
            });
      } else if (ctx.message.photo) {
          ctx.session.user.photo = ctx.message.photo[0].file_id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º id photo –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
          await ctx.telegram.getFileLink(ctx.message.photo[0].file_id)
            .then(src => url = src);
      } else {
          ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.");
          return;
      }
      // –°–¥–µ–ª–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

      axios({url, responseType: 'stream'}).then(response => {
        return new Promise((res, rej) => {
          response.data.pipe(uploadFromStream(s3, ctx.session.user.id))
          .on('finish', () => {console.log("Successfully saved")})
          .on('error', error => console.log("ERROR WHILE SAVING", error));
        });
      });
    // –î–æ–ø–∏—Å–∞—Ç—å —É—Å–ª–æ–≤–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
    ctx.reply("–§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª–∏.\n–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ", Extra.markup(Markup.keyboard([Markup.button('üôÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üôÖ')])))
    return ctx.wizard.next();
  },

  // –û —Å–µ–±–µ
  async (ctx) => {
    if (ctx.message.text == 'üôÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üôÖ') // –£–∂–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π
      ctx.session.user.about = '';
    else ctx.session.user.about = ctx.message.text;
    await User.create(ctx.session.user); // –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ –±–∞–∑—É
    ctx.reply("–û—Ç–ª–∏—á–Ω–æ!\n–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é",
             {
               reply_markup: { 
                 keyboard: menuModule.eventMenu()
                } 
              });

    await ctx.scene.leave('registration');
    ctx.scene.enter('eventMainMenu');
  }
);
  stage.register(register);

  return register;
}

module.exports = {registration}