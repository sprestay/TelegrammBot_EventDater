const WizardScene = require("telegraf/scenes/wizard");
const Markup = require('telegraf/markup');
const Extra = require('telegraf/extra');
const axios = require('axios');
const AWS = require('aws-sdk');
const User = require('../../models/User');


const rekognition = new AWS.Rekognition({apiVersion: '2016-06-27', region: 'us-east-1',});

const GenderKeyboard = 
   Extra.markup(Markup.inlineKeyboard([
      Markup.callbackButton('üöπ –ú—É–∂—Å–∫–æ–π', 'male'),
      Markup.callbackButton('üö∫ –ñ–µ–Ω—Å–∫–∏–π', 'female')
    ]));

let message_with_inline_for_change = null;

function registration(stage) {
  const register = new WizardScene(
    "registration",
    
    async (ctx) => {
      ctx.replyWithHTML("<b>–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?</b>");
      return ctx.wizard.next();
    },
    async (ctx) => {
      let text = ctx.message && ctx.message.text ? ctx.message.text.trim() : null; // –ù–µ —É—á–∏—Ç—ã–≤–∞–µ–º –∏–º—è –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
      if (text && text.length > 1 && new RegExp('^[–ê-—è]+$', 'gi').test(text)) {
        ctx.session.user = {
            id: ctx.message.from.id,
            name: null,
            gender: null,
            age: null,
            about: null,
            likes: [],
            dislikes: [],
            pairs: [],
        }
        ctx.session.user.name = text[0].toUpperCase() + text.toLowerCase().slice(1,);
        await ctx.reply("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, " + ctx.session.user.name);
        await ctx.replyWithHTML("<b>–¢–≤–æ–π –ø–æ–ª:</b>",  GenderKeyboard ).then(res => message_with_inline_for_change = res.message_id);
        return ctx.wizard.next();
      } else {
          ctx.reply("–≠–º–º... –ü–æ—Ö–æ–∂–µ –≤ –∏–º–µ–Ω–∏ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
      }
    },
  // –ü–æ–ª

  (ctx) => {
    let callback = ctx.update.callback_query ? ctx.update.callback_query.data : ctx.update.message.text;
    if (callback)
      callback = callback.trim().toLowerCase();

    if (['female', 'male', '–º', '–∂', '–º—É–∂', '–∂–µ–Ω', "–∂–µ–Ω—Å–∫", "–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"].indexOf(callback) != -1) {
      if (['male', '–º', "–º—É–∂", "–º—É–∂—Å–∫–æ–π"].indexOf(callback) != -1) {
        ctx.session.user.gender = 1;
        ctx.telegram.editMessageText(ctx.session.user.id, message_with_inline_for_change, undefined, '–ü–æ–ª', { reply_markup: 
          { inline_keyboard: [[Markup.callbackButton('‚úî üöπ –ú—É–∂—Å–∫–æ–π ‚úî', 'male')]] }
        });
      }
      else {
        ctx.session.user.gender = 0;
        ctx.telegram.editMessageText(ctx.session.user.id, message_with_inline_for_change, undefined, '–ü–æ–ª', { reply_markup: 
          { inline_keyboard: [[Markup.callbackButton('‚úî üö∫ –ñ–µ–Ω—Å–∫–∏–π ‚úî', 'female')]] }
        });
      }
      ctx.replyWithHTML("<b>–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?</b>");
      return ctx.wizard.next();
    } else {
        ctx.reply("–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è.\n–õ—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É)")
    }
  },
  // –í–æ–∑—Ä–∞—Å—Ç
    
    async (ctx) => {
      let age = ctx && ctx.message && ctx.message.text ? parseInt(ctx.message.text, 10) : null;
      if (age && Number.isInteger(age) && age >= 18 && age <= 70) {
          await ctx.reply(age.toString() + '..., —Ç–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º');
          ctx.session.user.age = age;

          //–ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è?
          let photo = await ctx.telegram.getUserProfilePhotos(ctx.message.from.id).then(res => res.photos[0]);
          if (photo)
            await ctx.replyWithHTML('<b>–î–∞–≤–∞–π –∑–∞–≥—Ä—É–∑–∏–º —Ñ–æ—Ç–æ</b>', Extra.markup(Markup.inlineKeyboard([Markup.callbackButton("üé• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", 'profile')])));
          else
            await ctx.replyWithHTML('<b>–î–∞–≤–∞–π –∑–∞–≥—Ä—É–∑–∏–º —Ñ–æ—Ç–æ</b>');

          return ctx.wizard.next();
      } else if (!age || !Number.isInteger(age)) { // –µ—Å–ª–∏ age == null, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∏–Ω—É–ª —á—Ç–æ-—Ç–æ, –∏–ª–∏ –Ω–µ Number, –∑–Ω–∞—á–∏—Ç –≤–≤–µ–ª —Ñ–∏–≥–Ω—é
          let sub_end = ctx.session.user.gender ? '' : 'a';
          ctx.reply("–ß—Ç–æ-—Ç–æ —Ç—ã –Ω–µ —Ç–æ –≤–≤–µ–ª" + sub_end);
      } else {
          ctx.reply("–û–±—â–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∏, –∫–æ–º—É –æ—Ç 18 –¥–æ 70 –ª–µ—Ç.\n–ü—Ä–æ—Å—Ç–∏, —Ç–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞)");
          ctx.session.user = null;
          await ctx.scene.leave('registration');
      }
    },
    
    // –§–æ—Ç–æ

    async (ctx) => { // –í—Å–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª—è—Ç—å—Å—è. –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —Å—Ç–æ—Ä–æ–µ –º–µ–Ω—é —Ä–æ–Ω—è–µ—Ç —Å–µ—Ä–≤–µ—Ä
      let url = null;
      if (ctx.update.callback_query && ctx.update.callback_query.data == 'profile') {
          await ctx.telegram.getUserProfilePhotos(ctx.update.callback_query.from.id) // –ö–∞–∫ —ç—Ç–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Ñ–æ—Ç–æ?
            .then(res => res.photos[0][0].file_id)
            .then(id => {
              ctx.session.user.photo = id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º id –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ telegram. –¢–æ, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –î–û –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ - –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ, –≤ –±–∞–∑—É –ø–∏—à–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–µ–¥.—à–∞–≥–µ
              return ctx.telegram.getFileLink(id).then(src => url = src)
            });
      } else if (ctx.message.photo) {
          ctx.session.user.photo = ctx.message.photo[0].file_id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º id photo –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
          await ctx.telegram.getFileLink(ctx.message.photo[0].file_id)
            .then(src => url = src);
      } else {
          ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.");
          return;
      }
      await ctx.reply("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ.... –ü–æ–¥–æ–∂–¥–∏")
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ. –° –ø–æ–º–æ—â—å—é AWS –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫, –∏ –Ω–µ—Ç –ø–æ—Ä–Ω—É—Ö–∏
      axios({url, responseType: 'arraybuffer'}).then(async response => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫
              rekognition.detectFaces({Image: {
                  Bytes: Buffer.from(response.data),
              }}, 
              function(err, data) {
                    if (err) console.log(err, err.stack);
                    else {
                        let res = data.FaceDetails;
                        if (res.length > 0 && res[0].Confidence > 80) {
                          rekognition.detectModerationLabels({Image: { //–ï—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ü–µ–Ω–∑—É—Ä—É
                              Bytes: Buffer.from(response.data),
                          }}, function(err, data) {
                              if (err) console.log(err, err.stack);
                              else {
                                  let res = data.ModerationLabels;
                                  if (res.length == 0 || res[0].Name == 'Suggestive' || res[0].Name =='Female Swimwear Or Underwear') {
                                      ctx.replyWithHTML("–§–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n<b>–ì–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?</b>", Extra.markup(Markup.inlineKeyboard([[
                                        Markup.callbackButton('–ú–æ—Å–∫–≤–∞', 'msk'),
                                        Markup.callbackButton('–ü–∏—Ç–µ—Ä', 'spb'),
                                        Markup.callbackButton('–î—Ä—É–≥–æ–µ', 'another'),
                                      ]])));
                                      return ctx.wizard.next();
                                  } else {
                                      ctx.reply('–¢–∞–∫! –í–æ—Ç –±–µ–∑ –ø–æ—Ä–Ω—É—Ö–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞');
                                      return;
                                  }
                              }
                          });
                        }
                        else {
                          ctx.reply('–ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ –ª–∏—Ü–æ, —è –≤–µ–¥—å –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤)');
                          return;
                        }
                    }    
              });
      });
  },

  // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
  async (ctx) => {
    let msg = ctx.update.callback_query ? ctx.update.callback_query.data : ctx.update.message.text;
    if (msg && new RegExp('^[A-—è]+$', 'gi').test(msg)) {
      msg = msg.trim().toLowerCase();
      if (['–º—Å–∫', '–º–æ—Å–∫–≤–∞', '–º–æ—Å–∫', 'moscow', 'msk',].indexOf(msg) != -1)
        msg = 'msk';
      if (['spb', '—Å–ø–±', "–ø–∏—Ç–µ—Ä", "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥", "–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥", "saint-petersburg", "piter"].indexOf(msg) != -1)
        msg = 'spb';
      ctx.session.user.location = msg;
      ctx.replyWithHTML("–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!)\n<b>–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ</b>", Extra.markup(Markup.keyboard([Markup.button('üôÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üôÖ')]).resize()))
      return ctx.wizard.next();
    } else {
      ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞");
      return;
    }
  },
  
  // –û —Å–µ–±–µ
  async (ctx) => { // —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∏–¥—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã
    if (ctx.message && ctx.message.text) {
      if (ctx.message.text == 'üôÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üôÖ')
        ctx.session.user.about = '';
      else
        ctx.session.user.about =  ctx.message.text ? ctx.message.text : '';
    }  else {
      ctx.reply("–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è =(");
      return;
    }
    await User.create(ctx.session.user); // –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ –±–∞–∑—É
    ctx.replyWithHTML(`üéâ–û—Ç–ª–∏—á–Ω–æ - —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–∫–æ–Ω—á–∏–ª–∏!üôå
    <b>–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º–µ–Ω—è –¥–æ–¥–µ–ª–∞—é—Ç - –¥–∞–º –∑–Ω–∞—Ç—å =)</b>
    –ê, –Ω—É –∏ –ø—Ä–æ—Å—Ç–∞–≤–ª—é—Å—å, –∫–æ–Ω–µ—á–Ω–æ –∂–µ  üéÖ
    \n
    <b>–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏—é –≤—Ä–µ–º—è</b> `, Extra.markup(Markup.removeKeyboard()));

    await ctx.scene.leave();
  },

);
  stage.register(register);

  return register;
}

module.exports = {registration}