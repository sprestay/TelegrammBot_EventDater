const WizardScene = require("telegraf/scenes/wizard");
const Markup = require('telegraf/markup');
const Extra = require('telegraf/extra');
const Scene = require('telegraf/scenes/base');
const searchers = require('../../search/event_search');

// –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–º
const make_first_char_capital = str => {
    if (!str) return str;
    return str[0].toUpperCase() + str.slice(1);
}

// —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –∏–≤–µ–Ω—Ç–∞
// slice –Ω–∞ description –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ KudaGo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ç—ç–≥–∞–º–∏ <p></p>
const display_event = event => {
    return `
    <strong>${make_first_char_capital(event.title)}</strong>
    <em>${event.description.slice(3,).slice(0, -4)}</em>
    -----------------------------------
    –¢—ç–≥–∏:
    ${event.tags.map(item => `<b><i>${make_first_char_capital(item)}</i></b>`).join(', ')}
    -----------------------------------
    `
}

// –ë–∞–∑–æ–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ inlineKeyboard.
const base_favourite_button = id => Extra.markup(Markup.inlineKeyboard([
    Markup.callbackButton('‚ô°', 'add_' + id.toString())
]));

//–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
const delete_to_favourite_button = id => [[Markup.callbackButton('‚ù§', 'del_' + id.toString())]];

//–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
const add_to_favourite_button = id => [[Markup.callbackButton('‚ô°', 'add_' + id.toString())]];


function event_main(stage) {
// –ü–æ–∏—Å–∫–æ–≤–∏–∫ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    const eventMainMenu = new Scene('eventMainMenu');
    stage.register(eventMainMenu);

    let cinema_page = 1;
    let events_page = 1;
    let restaurants = 1;
    let walk_page = 1;
    let msgs = [];

    eventMainMenu.start((ctx) => {
        ctx.reply('–†–∞–∑–¥–µ–ª "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"', Markup.keyboard([
            ['üé¨ –ö–∏–Ω–æ','üéâ –°–æ–±—ã—Ç–∏—è'],
            ['üç∑ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã', 'üë´ –ü—Ä–æ–≥—É–ª–∫–∏'],
        ]).resize().extra()
        )
    });

    // –ö–∏–Ω–æ
    eventMainMenu.hears('üé¨ –ö–∏–Ω–æ', (ctx) => {
        // ctx.replyWithPhoto({url: "https://clck.ru/QwUFM"}, extra)
        // ctx.reply("123");
    });
// –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –ø–æ —É—Å–ª–æ–≤–∏—é. –ï—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—å—Å—è - –¥–µ–ª–∞–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä

    // –ò–≤–µ–Ω—Ç—ã
    eventMainMenu.hears('üéâ –°–æ–±—ã—Ç–∏—è', async ctx => {
        const data = await searchers.event_searcher(city='msk', page=events_page)
            .then(res => res.results
            .filter(item => item.tags.indexOf('–¥–µ—Ç—è–º') == -1)
            .map(item => {
                let fav = base_favourite_button(item.id.toString() + '_event');
                fav.caption = display_event(item);
                fav.parse_mode = 'HTML';
                return ctx.replyWithPhoto({
                    url: item.images[0].image
                },fav).then(res => msgs.push(res.message_id));
            })
        );

        Promise.all(data).then(() => {
            ctx.reply('–í –Ω–∞—á–∞–ª–æ!', Extra.inReplyTo(msgs[0])
                                        .markup(Markup.inlineKeyboard([Markup.callbackButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°', 'next')])));
        });
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    eventMainMenu.action(new RegExp('^add_[0-9]+_(event|cinema|place)$'), ctx => {
        let id = ctx.match[0].split('_')[1]; // —á–∏—Å—Ç—ã–π id
        let type = ctx.match[0].split('_')[2]; // —Ç–∏–ø (–∏–≤–µ–Ω—Ç\–∫–∏–Ω–æ\–º–µ—Å—Ç–æ)
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (!ctx.session.events)
            ctx.session.events = {
                event: [],
                cinema: [],
                place: [],
            }

        switch(type) {
            case ('event'):
                ctx.session.events.event.push(Number(id));
                break;
            case ('cinema'):
                ctx.session.events.cinema.push(Number(id));
                break;
            case ('place'):
                ctx.session.events.place.push(Number(id));
                break;
            default:
                return;
        }

        ctx.editMessageReplyMarkup({
            inline_keyboard: delete_to_favourite_button(id + '_' + type)
        });
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    eventMainMenu.action(new RegExp('^del_[0-9]+_(event|cinema|place)$'), ctx => {
        let id = ctx.match[0].split('_')[1]; // —á–∏—Å—Ç—ã–π id
        let type = ctx.match[0].split('_')[2]; // —Ç–∏–ø (–∏–≤–µ–Ω—Ç\–∫–∏–Ω–æ\–º–µ—Å—Ç–æ)
        // –ï—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ—Ç - –≤–∞–ª–∏–º
        if (!ctx.session.events)
            return;
        
        switch(type) {
            case ('event'):
                ctx.session.events.event = ctx.session.events.event.filter((item) => item != Number(id));
                break;
            case ('cinema'):
                ctx.session.events.cinema = ctx.session.events.cinema.filter((item) => item != Number(id));
                break;
            case ('place'):
                ctx.session.events.place = ctx.session.events.place.filter((item) => item != Number(id));
                break;
            default:
                return;
        }

        ctx.editMessageReplyMarkup({
            inline_keyboard: add_to_favourite_button(id + '_' + type)
        });
    })





    return {
        eventMainMenu: eventMainMenu,
    }
}
/*
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Å—Ç:
    –ö–ª–∞—Å—Å–∏–∫–∞ - theatre,concert-hall,cinema,comedy-club
    –ó–∞–≥–æ—Ä–æ–¥–æ–º - suburb,stable,recreation
    –ü–æ-–ø—å—è–Ω–µ - strip-club,clubs
    –ü–æ–≥—É–ª—è—Ç—å - sights,prirodnyj-zapovednik,photo-places,park,palace,homesteads,fountain,dogs,attractions,animal-shelters
    –ü–æ–µ—Å—Ç—å - restaurants,bar,anticafe,brewery
    –ö—É–ª—å—Ç—É—Ä–∞ - museums,observatory,library,culture
    –î–≤–∏–∂—É—Ö–∞ - dance-studio,questroom,amusement

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π:
    –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ - business-events,education,tour
    –ö–ª–∞—Å—Å–∏–∫–∞ - cinema,concert,theater
    –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è - entertainment,quest,recreation
    –í—ã—Å—Ç–∞–≤–∫–∏ - exhibition,festival,yarmarki-razvlecheniya-yarmarki
    –í–µ—á–µ—Ä–∏–Ω–∫–∏ - party,holiday
    –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - social-activity
*/

// bot.command('foo', (ctx) => {
    // const extra = Extra.markup(Markup.inlineKeyboard([
    //   Markup.urlButton('‚ù§Ô∏è', 'http://telegraf.js.org')
    // ]))
    // extra.caption = 'Caption text here'
//     return ctx.replyWithPhoto('http://lorempixel.com/400/200/cats/', extra)
//   })

// ctx.replyWithPhoto({ url: <pic-url> }, { caption: "cat photo" })
module.exports = {event_main}