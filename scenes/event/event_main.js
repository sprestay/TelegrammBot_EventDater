const Markup = require('telegraf/markup');
const Extra = require('telegraf/extra');
const Scene = require('telegraf/scenes/base');
const searchers = require('../../search/event_search');
const User = require('../../models/User');
const menuModule = require('../menu');

// –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–º
const make_first_char_capital = str => {
    if (!str) return str;
    return str[0].toUpperCase() + str.slice(1);
}

let cinema_page = 1;
let events_page = 1;
let restaurants = 1;
let walk_page = 1;
let msgs = [];
let error_info = []; // –í —ç—Ç–æ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö, —á—Ç–æ–±—ã –ø–æ 100 —Ä–∞–∑ –Ω–µ –ø–∏—Å–∞—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ


// —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –∏–≤–µ–Ω—Ç–∞
// slice –Ω–∞ description –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ KudaGo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å —Ç—ç–≥–∞–º–∏ <p></p>
const display_event = (event, type) => {
    if (type != 'cinema')
        return `
        <strong>${make_first_char_capital(event.title)}</strong>
        <em>${event.description.replace(new RegExp('(<p>|<\/p>)', 'g'), '')}</em>
        -----------------------------------
        –¢—ç–≥–∏:
        ${event.tags.map(item => `<b><i>${make_first_char_capital(item)}</i></b>`).join(', ')}
        -----------------------------------
        `
    else if (type == 'cinema')
        return `
        <strong>${event.title}</strong>
        <em>${event.year}</em>
        –†–µ–∂–∏—Å—Å–µ—Ä: ${event.director}
        -----------------------------------
        –ñ–∞–Ω—Ä—ã:
        ${event.genres.map(item => `<b><i>${make_first_char_capital(item.name)}</i></b>`).join(', ')}
        -----------------------------------
        –ü–æ–¥—Ä–æ–±–Ω–µ–µ: <a href="${event.imdb_url}">${event.title}</a>
        `
}

// –ë–∞–∑–æ–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ inlineKeyboard.
const base_favourite_button = (id, is_favourite) => Extra.markup(Markup.inlineKeyboard([
    is_favourite ? Markup.callbackButton('‚ù§', 'del_' + id.toString()) : Markup.callbackButton('‚ô°', 'add_' + id.toString())
]));

//–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
const delete_to_favourite_button = id => [[Markup.callbackButton('‚ù§', 'del_' + id.toString())]];

//–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
const add_to_favourite_button = id => [[Markup.callbackButton('‚ô°', 'add_' + id.toString())]];

// –ü–æ–∏—Å–∫ –∏–≤–µ–Ω—Ç–∞
const search_for_events = (ctx) => {
    return (
        searchers.event_searcher(city='msk', page=events_page)
        .then(res => res.results
        .filter(item => item.tags.indexOf('–¥–µ—Ç—è–º') == -1)
        .map(item => {
            //–ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —ç—Ç–æ—Ç –∏–≤–µ–Ω—Ç, –∏–ª–∏ –Ω–µ—Ç
            let is_favourite = false;
            if (ctx.session.events)
                is_favourite = ctx.session.events.event.indexOf(item.id) == -1 ? false : true;
            //–ü–µ—Ä–µ–¥–∞–¥–∏–º —Ñ–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é, –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–µ–Ω—é
            let fav = base_favourite_button(item.id.toString() + '_event', is_favourite);
            fav.caption = display_event(item, 'event');
            fav.parse_mode = 'HTML';
            return ctx.replyWithPhoto({
                url: item.images[0].image
            },fav).then(res => msgs.push(res.message_id));
        }))
    )
}

// –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞
const search_for_movies = (ctx) => {
    return (
        searchers.cinema_searcher(city='msk', page=cinema_page)
        .then(res => res.results
        .map(item => {
            let is_favourite = false;
            if (ctx.session.events)
                is_favourite = ctx.session.events.cinema.indexOf(item.id) == -1 ? false : true;
            let fav = base_favourite_button(item.id.toString() + '_cinema', is_favourite);
            fav.caption = display_event(item, 'cinema');
            fav.parse_mode = 'HTML';
            return ctx.replyWithPhoto({
                url: item.images[0].image
            }, fav).then(res => msgs.push(res.message_id));
        }))
    )
}

// –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—É–ª–æ–∫
const search_for_walk = (ctx) => {
    return (
        searchers.walk_searcher(city='msk', page=walk_page)
        .then(res => res.results
        .map(item => {
            let is_favourite = false;
            if (ctx.session.events)
                is_favourite = ctx.session.events.place.indexOf(item.id) == -1 ? false : true;
            let fav = base_favourite_button(item.id.toString() + '_placew', is_favourite);
            fav.caption = display_event(item, 'placew');
            fav.parse_mode = 'HTML';
            return ctx.replyWithPhoto({
                url: item.images[0].image
            }, fav).then(res => msgs.push(res.message_id));
        }))
    )
}

const search_for_restaurants = (ctx) => {
    return (
        searchers.restaurants_search(city='msk', page=restaurants)
        .then(res => res.results
        .map(item => {
            let is_favourite = false;
            if (ctx.session.events)
                is_favourite = ctx.session.events.place.indexOf(item.id) == -1 ? false : true;
            let fav = base_favourite_button(item.id.toString() + '_placer', is_favourite);
            fav.caption = display_event(item, 'placer');
            fav.parse_mode = 'HTML';
            return ctx.replyWithPhoto({
                url: item.images[0].image
            }, fav).then(res => msgs.push(res.message_id));
        }))
    )
}

// –°–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
const change_page = async (ctx, query_func, next, type) => {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for (let msg of msgs)
        ctx.deleteMessage(msg);
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
    switch(type) {
        case('event'):
            next ? events_page++ : events_page--;
            break;
        case('cinema'):
            next ? cinema_page++ : events_page--;
            break;
        case('placer'):
            next ? restaurants++ : restaurants--;
            break;
        case('placew'):
            next ? walk_page++ : walk_page--;
            break;
        default:
            return;
    }
    msgs = [];
    // –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - –Ω–æ–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
    let data = await query_func(ctx);
    navigation_buttons(data, ctx, type);
}

//–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
const navigation_buttons = (data, ctx, type) => {

    let counter = -1;

    switch (type) {
        case ('event'):
            counter = events_page;
            break;
        case ('cinema'):
            counter = cinema_page;
            break;
        case ('placew'):
            counter = walk_page;
            break;
        case ('placer'):
            counter = restaurants;
            break;
    }

    Promise.all(data).then(() => {
        ctx.reply('–í –Ω–∞—á–∞–ª–æ!', counter > 1 ?
                                    Extra.inReplyTo(msgs[0])
                                    .markup(Markup.inlineKeyboard([
                                        Markup.callbackButton('‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', 'back_' + type),
                                        Markup.callbackButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°', 'next_' + type),
                                    ])) 
                                    :
                                    Extra.inReplyTo(msgs[0])
                                    .markup(Markup.inlineKeyboard([
                                        Markup.callbackButton('–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°', 'next_' + type)
                                    ]))
                                    ).then(res => msgs.push(res.message_id));
    });
}

// –§—É–∫–Ω—Ü–∏—è –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å—Ü–µ–Ω–µ
function event_main(stage) {
// –ü–æ–∏—Å–∫–æ–≤–∏–∫ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    const eventMainMenu = new Scene('eventMainMenu');
    stage.register(eventMainMenu);

    // –ö–∏–Ω–æ
    eventMainMenu.hears('üé¨ –ö–∏–Ω–æ', async ctx => {
        for (let msg of msgs)
            ctx.deleteMessage(msg);
        msgs = [];
        let data = await search_for_movies(ctx);
        navigation_buttons(data, ctx, 'cinema');
    });

    // –ò–≤–µ–Ω—Ç—ã
    eventMainMenu.hears('üéâ –°–æ–±—ã—Ç–∏—è', async ctx => {
        for (let msg of msgs)
            ctx.deleteMessage(msg);
        msgs = [];
        let data = await search_for_events(ctx);
        navigation_buttons(data, ctx, 'event');
    });

    // –ü—Ä–æ–≥—É–ª–∫–∏
    eventMainMenu.hears('üë´ –ü—Ä–æ–≥—É–ª–∫–∏', async ctx => {
        for (let msg of msgs)
            ctx.deleteMessage(msg);
        msgs = [];
        let data = await search_for_walk(ctx);
        navigation_buttons(data, ctx, 'placew');
    });

    // –†–µ—Å—Ç–æ—Ä–∞–Ω—ã
    eventMainMenu.hears('üç∑ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã', async ctx => {
        for (let msg of msgs)
            ctx.deleteMessage(msg);
        msgs = [];
        let data = await search_for_restaurants(ctx);
        navigation_buttons(data, ctx, 'placer');
    });

    //–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    eventMainMenu.hears('üè´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async ctx => {
        let e = ctx.session.events;
        if (e && (e.event.length + e.cinema.length + e.place.length)) {
            ctx.reply('"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"', {
                reply_markup: {
                    keyboard: menuModule.mainMenu(),
                    resize_keyboard: true,
                }
            })
            await ctx.scene.leave('eventMainMenu');
        } else {
            for (let error of error_info) // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
                ctx.deleteMessage(error);
            ctx.reply('–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ø–∞—Ä—É').then(res => error_info.push(res.message_id));
        }
    });

    //–ü—Ä–æ—Ñ–∏–ª—å
    eventMainMenu.hears('‚ù§ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', ctx => {

    });

    //–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    eventMainMenu.action(new RegExp('^next_(event|cinema|placew|placer)$'), ctx => {
        let type = ctx.match[0].split('_')[1];
        switch(type) {
            case ('event'):
                change_page(ctx, search_for_events, true, type);
                break;
            case ('cinema'):
                change_page(ctx, search_for_movies, true, type);
                break;
            case ('placew'):
                change_page(ctx, search_for_walk, true, type);
                break;
            case ('placer'):
                change_page(ctx, search_for_restaurants, true, type);
                break;
            default:
                return;
        }
    });

    eventMainMenu.action(new RegExp('^back_(event|cinema|placew|placer)$'), async ctx => {
        let type = ctx.match[0].split('_')[1];
        switch(type) {
            case ('event'):
                change_page(ctx, search_for_events, false, type);
                break;
            case ('cinema'):
                change_page(ctx, search_for_movies, false, type);
                break;
            case ('placew'):
                change_page(ctx, search_for_walk, false, type);
                break;
            case ('placer'):
                change_page(ctx, search_for_restaurants, false, type);
                break;
            default:
                return;
        }
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    eventMainMenu.action(new RegExp('^add_[0-9]+_(event|cinema|placew|placer)$'), async ctx => {
        let id = ctx.match[0].split('_')[1]; // —á–∏—Å—Ç—ã–π id
        let type = ctx.match[0].split('_')[2]; // —Ç–∏–ø (–∏–≤–µ–Ω—Ç\–∫–∏–Ω–æ\–º–µ—Å—Ç–æ)
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (!ctx.session.events) {
            ctx.session.events = {
                event: [],
                cinema: [],
                place: [],
            }
        }

        switch(type) {
            case ('event'):
                ctx.session.events.event.push(Number(id));
                User.findOneAndUpdate({id: ctx.session.user.id}, {event: ctx.session.events.event}).exec();
                break;
            case ('cinema'):
                ctx.session.events.cinema.push(Number(id));
                User.findOneAndUpdate({id: ctx.session.user.id}, {cinema: ctx.session.events.cinema}).exec();
                break;
            case ('placer'):
            case ('placew'):
                ctx.session.events.place.push(Number(id));
                User.findOneAndUpdate({id: ctx.session.user.id}, {place: ctx.session.events.place}).exec();
                break;
            default:
                return;
        }
        
        ctx.editMessageReplyMarkup({
            inline_keyboard: delete_to_favourite_button(id + '_' + type),
        });
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    eventMainMenu.action(new RegExp('^del_[0-9]+_(event|cinema|placew|placer)$'), ctx => {
        let id = ctx.match[0].split('_')[1]; // —á–∏—Å—Ç—ã–π id
        let type = ctx.match[0].split('_')[2]; // —Ç–∏–ø (–∏–≤–µ–Ω—Ç\–∫–∏–Ω–æ\–º–µ—Å—Ç–æ)
        // –ï—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ—Ç - –≤–∞–ª–∏–º
        if (!ctx.session.events)
            return;
        
        switch(type) {
            case ('event'):
                ctx.session.events.event = ctx.session.events.event.filter((item) => item != Number(id));
                User.findOneAndUpdate({id: ctx.session.user.id}, {event: ctx.session.events.event}).exec();
                break;
            case ('cinema'):
                ctx.session.events.cinema = ctx.session.events.cinema.filter((item) => item != Number(id));
                User.findOneAndUpdate({id: ctx.session.user.id}, {cinema: ctx.session.events.cinema}).exec();
                break;
            case ('placer'):
            case ('placew'):
                ctx.session.events.place = ctx.session.events.place.filter((item) => item != Number(id));
                User.findOneAndUpdate({id: ctx.session.user.id}, {event: ctx.session.events.event}).exec();
                break;
            default:
                return;
        }

        ctx.editMessageReplyMarkup({
            inline_keyboard: add_to_favourite_button(id + '_' + type)
        });
    });

    return {
        eventMainMenu: eventMainMenu,
    }
}

module.exports = {event_main}