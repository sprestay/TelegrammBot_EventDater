const { Telegraf } = require('telegraf');
const config = require('./config'); // –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Å—é–¥–∞ –ø–∞—Ä–æ–ª–∏
const session = require('telegraf/session');
const Stage = require('telegraf/stage');
const Markup = require('telegraf/markup');
const Extra = require('telegraf/extra');
const mongoose = require('mongoose');
const registration_module = require('./scenes/registration/registration');
const feedback_scene = require('./scenes/feedback/feedback');
const User = require('./models/User');
//END OF IMPORTS


//CONST BLOCK
const stage = new Stage();
const bot = new Telegraf(config.api_token);
const db_url = `mongodb+srv://${config.db_user}:${config.db_password}@eventdater.2weze.mongodb.net/${config.db_name}?retryWrites=true&w=majority`


// Settings
bot.use(session());
bot.use(stage.middleware());
registration_module.registration(stage);
feedback_scene(stage);
// DB connection
const connect = mongoose.connect(db_url, { useNewUrlParser: true , useUnifiedTopology: true, useFindAndModify: false});
connect.then((success) => {
    console.log("Successfully connected to database");
}).catch((err) => console.log("ERROR: ", err));
//

bot.start(async (ctx) => {
  let id = ctx.update.message.from.id;
  ctx.session.user = await User.findOne({id: id}).exec();
  if (ctx.session.user)
    ctx.replyWithHTML(`–ü—Ä–∏–≤–µ—Ç, ${ctx.session.user.name}! üëã –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å)
    \n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòû, –Ω–æ —Ç—ã –±—É–¥–µ—à—å ${ctx.session.user.gender ? '–ø–µ—Ä–≤—ã–º' : '–ø–µ—Ä–≤–æ–π'}, –∫–æ–º—É —è —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æüòâ
    \n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è üëâ/feedback üëà
    \nüî•–ê –ø–æ–∫–∞ - –ø–æ–º–æ–≥–∏ —Å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º - –ø–æ–¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ =)üî•`)
  else {
    ctx.replyWithHTML(`
    –ü—Ä–∏–≤–µ—Ç üëã, –¥—Ä—É–≥!
    –ï—Å–ª–∏ –ø–æ—Ä–æ–π —Ç—ã –æ—Ç–∫–∞–∑—ã–≤–∞–µ—à—å—Å—è –æ—Ç –ø–æ—Ö–æ–¥–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üéà, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ —Å –∫–µ–º üò¢,
    –∏–ª–∏ –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–≤–æ—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É –∏ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–ª—Å—è –≤ —Å–∞–π—Ç–∞—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ - —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É üíã!
    –Ø –±–æ—Ç ü§ñ, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å —ç—Ç–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. üí™
    –î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.  
    `, Extra.markup(Markup.removeKeyboard()));
    ctx.scene.enter('registration');
  }
});

bot.command('feedback', async ctx => {
  ctx.replyWithHTML(`‚úè<b>–ù–∞–ø–∏—à–∏, –æ —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å.</b>‚úè\n–õ—é–±–∞—è –æ–±—Ä—Ç–∞–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏–≤–µ–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è!)\n`);
  await ctx.scene.enter('FeedbackScene');
});

bot.on('text', async ctx => {
  let id = ctx.update.message.from.id;
  ctx.session.user = await User.findOne({id: id}).exec();
  if (ctx.session.user)
    ctx.replyWithHTML(`–Ø –≤—Å–µ –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòû, –Ω–æ —Ç—ã –±—É–¥–µ—à—å ${ctx.session.user.gender ? '–ø–µ—Ä–≤—ã–º' : '–ø–µ—Ä–≤–æ–π'}, –∫–æ–º—É —è —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –≤—Å–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æüòâ
    \n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è üëâ/feedback üëà`);
  else {
    await ctx.replyWithHTML(`–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.`, Extra.markup(Markup.removeKeyboard()));
    ctx.scene.enter('registration');
  }
});

bot.launch();