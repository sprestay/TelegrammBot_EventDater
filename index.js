const api_token = '1256406675:AAGxKpXKK0JQ2L3e7O0LzAffFAsH1dpAs_4';
const { Telegraf } = require('telegraf');
const session = require('telegraf/session');
const Stage = require('telegraf/stage');
const Markup = require('telegraf/markup');
const Extra = require('telegraf/extra');
const mongoose = require('mongoose');
const registration_module = require('./scenes/registration/registration');
const event_module = require('./scenes/event/event_main');
const User = require('./models/User');
//END OF IMPORTS
const Scene = require('telegraf/scenes/base');

//CONST BLOCK
const stage = new Stage();
const bot = new Telegraf(api_token);
const db_user = 'sprestay';
const db_password = 'xF9kibsAwCXWYbkF';
const db_name = 'event_dater_tg'
const db_url = `mongodb+srv://${db_user}:${db_password}@cluster0.oqvee.mongodb.net/${db_name}?retryWrites=true&w=majority`;


// Settings
bot.use(session());
bot.use(stage.middleware());
registration_module.registration(stage);
event_module.event_main(stage);
// DB connection
const connect = mongoose.connect(db_url, { useNewUrlParser: true , useUnifiedTopology: true, useFindAndModify: false});
connect.then((success) => {
    console.log("Successfully connected to database");
}).catch((err) => console.log("ERROR: ", err));
//

const inlineMessageRatingKeyboard = Markup.inlineKeyboard([
  Markup.callbackButton('üëç', 'like'),
  Markup.callbackButton('üëé', 'dislike')
]).extra()


bot.hears("find_me", ctx => console.log(ctx.message.from.id));
bot.hears("get", ctx => ctx.telegram.getUserProfilePhotos(ctx.message.from.id)
                        .then(res => console.log(res.photos)));



bot.start((ctx) => {
  if (ctx.session.user)
    ctx.reply("–ü—Ä–∏–≤–µ—Ç, " + ctx.session.user.name + "!\n" + ctx.session.user.gender ? '–ì–æ—Ç–æ–≤ –∏—Å–∫–∞—Ç—å –ø–∞—Ä—É?)' : "–¢—ã –æ—Ç–ª–∏—á–Ω–æ –≤—ã–≥–ª—è–¥–∏—à—å! –ö—É–¥–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–π–¥–µ–º?)")
  else {
    ctx.reply('–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', Extra.markup(Markup.removeKeyboard()));
    ctx.scene.enter('registration');
  }
});

// –¢–ï–°–¢
bot.command('ignat', ctx => {
  ctx.telegram.sendMessage(650882495, '–ü—Ä–∏–≤–µ—Ç, –ò–≥–Ω–∞—Ç');
})

const testScene = new Scene("testScene");
stage.register(testScene);

bot.hears("new_scene", ctx => ctx.scene.enter('testScene'));
testScene.hears("show", ctx=> ctx.reply("–ù–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ü–µ–Ω–µ"));
bot.hears('show', ctx => ctx.reply("–ù–∞ –≥–ª–∞–≤–Ω–æ–µ —Å—Ü–µ–Ω–µ"));

User.watch().on('change', next => console.log("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ", next));

bot.hears("users", async ctx => {
  User.find({}, function(err, users) {
    users.forEach(item => {
      ctx.replyWithHTML(`
      <b>–≠—Ç–æ ${item.name}</b>
      <a href="tg://user?id=${item.id}">–∫–ª–∏–∫</a>
      `)
    })
  })
})

//–ü–æ–¥–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç
// setInterval(function() {
//   bot.telegram.sendMessage(650882495, '–ò–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞');
// }, 10000);
//–¢–ï–°–¢


bot.command('clear', (ctx) => ctx.session.user = null)
bot.launch()



/// –ü—É—à–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç
// await fetch('https://api.telegram.org/botTOKEN/sendMessage?text=TEST&chat_id=123456';)